#!/usr/bin/env bash
# Usage: pj scripts create
# Summary: This script is called by the root script to autoupdate the local pj script repository
# Help: Do not use this script manually

set -e

# Example with command group
# -> pj scripts create <command groupt> <command name>

# If only one variable, put script in root of folder, if two or more, check if directory exists, and if not create it

shift

cd $SCRIPT_DIR

if [ "$#" -lt 1 ]; then

	echo "Wrong number of arguments..."
    echo "Example: pj scripts create (command name)"
	echo "Example: pj scripts create [command group]+ (command name)"

fi

if [ "$#" -eq 1 ]; then

	git_branch="new-command-$1"
	command_path=$SCRIPT_DIR/libexec/pj-$1
	git_file=libexec/pj-$1

else

	git_branch="new-command"
	command_path=$SCRIPT_DIR/libexec
	git_file=libexec
fi

if [ "$#" -gt 1 ]; then

	commands=($@)

	for (( i=0; i < ${#commands[@]}; i++ ))
	do

		git_branch="$git_branch-${commands[$i]}"
		command_path=$command_path/pj-"${commands[$i]}"
		git_file=$git_file/pj-"${commands[$i]}"

		if [ ${#commands[@]} -gt 1 ]; then

			if [ ! -d "$(dirname "$command_path")" ]; then

				mkdir -p "$(dirname "$command_path")"

			fi

		fi

		shift
	
	done

fi

git checkout -b $git_branch

touch $command_path

echo '#!/usr/bin/env bash' > $command_path
echo "# Usage: pj $@" > $command_path
echo '# Summary: SUMMARY_PLACE_HOLDER' > $command_path
echo '# Help: HELP_PLACE_HOLDER' > $command_path

chmod +x $command_path

echo
echo "Command created: $git_file"
echo

git add $git_file
git commit -m "New Command $@"

pj scripts push