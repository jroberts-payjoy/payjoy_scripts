#!/usr/bin/env bash
set -e

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

function __wget() {
    : ${DEBUG:=0}
    local URL=$1
    local tag="Connection: close"
    local mark=0

    if [ -z "${URL}" ]; then
        printf "Usage: %s \"URL\" [e.g.: %s http://www.google.com/]" \
               "${FUNCNAME[0]}" "${FUNCNAME[0]}"
        return 1;
    fi
    read proto server path <<<$(echo ${URL//// })
    DOC=/${path// //}
    HOST=${server//:*}
    PORT=${server//*:}
    [[ x"${HOST}" == x"${PORT}" ]] && PORT=80
    [[ $DEBUG -eq 1 ]] && echo "HOST=$HOST"
    [[ $DEBUG -eq 1 ]] && echo "PORT=$PORT"
    [[ $DEBUG -eq 1 ]] && echo "DOC =$DOC"

    exec 3<>/dev/tcp/${HOST}/$PORT
    echo -en "GET ${DOC} HTTP/1.1\r\nHost: ${HOST}\r\n${tag}\r\n\r\n" >&3
    while read line; do
        [[ $mark -eq 1 ]] && echo $line
        if [[ "${line}" =~ "${tag}" ]]; then
            mark=1
        fi
    done <&3
    exec 3>&-
}

echo
echo "Launching PayJoy Script Handler"
echo 

if [[ -f "$SCRIPT_DIR/../tmp/.update_counter" ]]; then

  uc=`cat $SCRIPT_DIR/../tmp/.update_counter`

else 

  uc="0"

fi

if [[ "$uc" = "0" ]]; then

  cwwd=`echo $PWD`

  cd $SCRIPT_DIR

  githash=`git log --pretty=format:'%h' -n 1`

  echo -n "Checking for updates, Current Hash [$githash]...  "

  uc=`expr $uc + 1`

  echo $uc > $SCRIPT_DIR/../tmp/.update_counter

  wget https://github.com/jroberts-payjoy/payjoy_scripts -O $SCRIPT_DIR/../tmp/updatecheck.html > /dev/null 2>&1

  # <a class="d-none js-permalink-shortcut" data-hotkey="y" href="/jroberts-payjoy/payjoy_scripts/tree/ac72ca6  
  curhash=`cat $SCRIPT_DIR/../tmp/updatecheck.html | grep "js-permalink-shortcut" | cut -b 106,107,108,109,110,111,112`

  echo -n "Available Hash [$curhash]..."

  if [[ "$curhash" != "$githash" ]]; then

    echo "Update FOUND! Updating..."

    pj update > /dev/null 2>&1

    newhash=`git log --pretty=format:'%h' -n 1`

    echo ""
    echo ""
    echo "Updated to checkout hash: $newhash"
    echo ""
    echo ""

  else

    echo "No updates found."
    echo ""

  fi

  cd $cwwd

else

  uc=`expr $uc + 1`

  if [[ "$uc" == "5" ]]; then

    uc="0"

  fi

  echo $uc > $SCRIPT_DIR/../tmp/.update_counter

fi


resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

libexec_path="$(abs_dirname "$0")"
export _PJ_ROOT="$(abs_dirname "$libexec_path")"

commands=($@)

path_builder="$_PJ_ROOT/libexec"
command_builder=""
_SUB_COMMAND_IS="false"
prev_command=""

_SUB_EXECUTABLES=(".sh" ".php" ".py")

for (( i=0; i<=${#commands[@]}; i++ ))
do
  if [ "${commands[$i]}" != "" ] && [[ "${commands[$i]}" != -* ]]; then
    if [ -d "$path_builder/pj-${commands[$i]}" ]; then
      path_builder="$path_builder/pj-${commands[$i]}"
    fi

    if [ -f "$path_builder/pj-${commands[$i]}" ]; then
      prev_command=$command_builder
      command_builder="${commands[$i]}"
      _SUB_COMMAND_IS="true"
    else
      _SUB_COMMAND_IS="false"
    fi

    if [ "$_SUB_COMMAND_IS"  == "false" ]; then
      for exe in ${_SUB_EXECUTABLES[@]}; do
        if [ -f "$path_builder/pj-${commands[$i]}$exe" ]; then
          prev_command=$command_builder
          command_builder="${commands[$i]}$exe"
          _SUB_COMMAND_IS="true"
        else
          _SUB_COMMAND_IS="false"
        fi

        if [ "$_SUB_COMMAND_IS"  == "true" ]; then
          break
        fi
      done
    fi
  fi

  if [[ "${commands[$i]}" == -* ]]; then
    break
  fi
done

flags=""
flags_on="false"
for (( i=0; i<=${#commands[@]}; i++ ))
do
  if [[ "${commands[$i]}" == -* ]] || [ "$flags_on" == "true" ]; then
    flags="$flags${commands[$i]} "
    flags_on="true"
  fi
done

export _SUB_COMMAND_ROOT="$path_builder"
export _SUB_COMMAND_FILE="$command_builder"
export _SUB_COMMAND_VARS="$@"
export _SUB_COMMAND_IS="$_SUB_COMMAND_IS"

if [ -d "$_SUB_COMMAND_ROOT" ]; then
  export PATH="${libexec_path}:$_SUB_COMMAND_ROOT:$PATH"
else
  export PATH="${libexec_path}:$PATH"
fi

command="$1"
if [ "$command" == "" ] || [ "$command" == "-h" ] || [ "$command" == "-help" ]; then
  exec pj-help
  exit
elif [ "$command" == "help" ] || [ "$command" == "commands" ]; then
  command_path="$(command -v "pj-$command" || true)"
else
  command_path="$(command -v "pj-$command_builder" || true)"
fi

if [ ! -x "$command_path" ]; then
  echo "pj: no such command \`$command'" >&2
  exit 1
fi

shift
if [ "$flags" == "" ]; then
  exec "$command_path" "$@"
else
  exec "$command_path" $flags
fi